services:
  redis:
    image: redis:latest
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s

  postgres:
    image: postgres:14
    restart: "no"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scraper
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s

  pgadmin:
    image: dpage/pgadmin4
    restart: "no"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com  # Change this
      PGADMIN_DEFAULT_PASSWORD: admin  # Change this
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    restart: "no"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - LLM_SERVICE_URL=http://llm:5000
    volumes:
      - ./producer/src:/app/src
      - ./queue_manager.py:/app/queue_manager.py
    command: python src/producer_main.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  llm:
    build:
      context: .
      dockerfile: LLM/Dockerfile
    restart: "no"
    ports:
      - "5001:5000"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - DB_SERVICE_URL=http://db_processor:5000
      - TRANSFORMERS_CACHE=/app/model_cache
      - HF_HOME=/app/model_cache
    volumes:
      - ./LLM/src:/app/src
      - model_cache:/app/model_cache
    user: root  # Temporarily use root to ensure cache directory permissions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      bash -c "
        mkdir -p /app/model_cache &&
        chmod -R 777 /app/model_cache &&
        python src/llm_main.py
      "

  db_processor:
    build:
      context: .
      dockerfile: database/Dockerfile
    restart: "no"
    ports:
      - "5002:5000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=scraper
      - REDIS_HOST=redis
    volumes:
      - ./database/src:/app/src
      - ./queue_manager.py:/app/queue_manager.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: python src/db_main.py

  web:
    build:
      context: ./web_service
      dockerfile: Dockerfile
    ports:
      - "8080:5000"
    depends_on:
      producer:
        condition: service_healthy
      llm:
        condition: service_healthy
      db_processor:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - PRODUCER_SERVICE_URL=http://producer:5000
      - LLM_SERVICE_URL=http://llm:5000
      - DB_SERVICE_URL=http://db_processor:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: "no"

volumes:
  redis_data:
  model_cache:
  postgres_data:
  pgadmin_data: